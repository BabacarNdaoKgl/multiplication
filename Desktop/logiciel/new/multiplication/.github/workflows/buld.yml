name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build with Maven
        # -B for batch mode, --file pom.xml is often default but explicit here
        run: mvn -B package --file pom.xml

  test:
    runs-on: ubuntu-latest
    needs: build # Ensures build job completes successfully first
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Run tests
        run: mvn test

  deploy:
    runs-on: ubuntu-latest
    needs: test # Ensures test job completes successfully first
    # Only run deploy on push to the main branch, not on pull requests
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # Note: In a real scenario, you might download the artifact from the 'build' job
      # instead of rebuilding. For simplicity here, we rebuild.
      - name: Build with Maven
        run: mvn -B package --file pom.xml

      # Exemple de déploiement sur GitHub Pages, DockerHub, ou autre
      # Ici, on va juste simuler le déploiement
      - name: Deploy (simulation)
        run: echo "Déploiement réussi !"
